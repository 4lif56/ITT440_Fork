#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <signal.h>
#include <sys/wait.h> // Include header for wait()

// Signal handler function for handling Ctrl + C interrupt
void handle_interrupt(int sig) {
    printf("\nExiting program...\n");
    exit(0);
}

int main() {
    signal(SIGINT, handle_interrupt); // Register the interrupt signal handler
    int num_children = 3; // Number of child processes
    int pipefds[num_children][2]; // Create an array of pipes
    pid_t pid;
    char message[100];

    // Create pipes for each child
    for (int i = 0; i < num_children; i++) {
        if (pipe(pipefds[i]) == -1) {
            perror("Pipe creation failed");
            return 1;
        }
    }

    // Parent process gets the message from the user
    printf("Enter a message: ");
    fgets(message, sizeof(message), stdin);
    message[strcspn(message, "\n")] = '\0'; // Remove newline character

    for (int i = 0; i < num_children; i++) {
        pid = fork();
        if (pid < 0) {
            perror("Fork failed");
            return 1;
        }

        if (pid == 0) {
            // Child process
            close(pipefds[i][1]); // Close the write end of the pipe
            char buffer[100];
            read(pipefds[i][0], buffer, sizeof(buffer)); // Read the message from the pipe
            printf("Child %d received message: %s\n", i + 1, buffer);
            close(pipefds[i][0]); // Close the read end of the pipe
            exit(0);
        }
    }

    // Parent process
    for (int i = 0; i < num_children; i++) {
        close(pipefds[i][0]); // Close the read end of each pipe
        write(pipefds[i][1], message, strlen(message) + 1); // Write the message to each child's pipe
        close(pipefds[i][1]); // Close the write end after writing
    }

    // Wait for all child processes to complete
    for (int i = 0; i < num_children; i++) {
        wait(NULL);
    }

    return 0;
}
